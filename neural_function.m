function [Y,Xf,Af] = neural_function(X,Xi,Ai)
%NEURAL_FUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 16-Nov-2017 20:34:13.
% 
% [Y,Xf,Af] = neural_function(X,Xi,Ai) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
%   Xi = 1x2 cell 1, initial 2 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
% 
%   Ai = 2x2 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 2xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
%   Xf = 1x2 cell 1, final 2 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
% 
%   Af = 2x2 cell 2, final 2 layer delay states.
%   Each Af{1ts} = 2xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -0.923630364854819;
x1_step1.gain = 0.410336934951591;
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.089113533309382736425;0.18829819977934864061];
IW1_1 = [0.0051604284029123639529 -0.0047911811791488912934;-0.048797589128737529907 0.045569073495611969737];
LW1_2 = [0.25941343947680378657 -0.15561615043679230541;-0.9651751935975450003 0.74515686369115852195];

% Layer 2
b2 = 0.85914562565392127436;
LW2_1 = [12.461675833443715433 1.3342845679516119883];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.323123950520061;
y1_step1.xoffset = 0.000275602421621117;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end
if (nargin < 3), error('Initial input states Ai argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
  Q = size(Xi{1},2);
elseif ~isempty(Ai)
  Q = size(Ai{1},2);
else
  Q = 0;
end
if isempty(Xi)
  Xi=cell(1,2);
  Xi(1,:) = {zeros(1,Q)};
end
if isempty(Ai)
  Ai=cell(2,2);
  Ai(1,:) = {zeros(2,Q)};
  Ai(2,:) = {zeros(1,Q)};
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Layer Delay States
Ad1 = [Ai(1,:) cell(1,1)];
Ad2 = [Ai(2,:) cell(1,1)];

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
      adts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Ad2{mod(adts-[1 2]-1,3)+1});
    Ad1{adts} = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + LW1_2*tapdelay2);
    
    % Layer 2
    tapdelay1 = cat(1,Ad1{mod(adts-0-1,3)+1});
    Ad2{adts} = repmat(b2,1,Q) + LW2_1*tapdelay1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(Ad2{adts},y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
finalats = TS+(1: 2);
ats = mod(finalats-1,3)+1;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,2);
Af(1,:) = Ad1(:,ats);
Af(2,:) = Ad2(:,ats);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
