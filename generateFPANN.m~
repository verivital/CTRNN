%Vanderbilt University
%Generate Hybrid Automaton of Fixed Point Attractor
%-------------------
clear
clc;
close all

%import data structures in Hyst
javaaddpath(['..', filesep, '.', filesep, 'lib', filesep, 'Hyst.jar']);
import de.uni_freiburg.informatik.swt.spaceexboogieprinter.*;
import com.verivital.hyst.automaton.*;
import com.verivital.hyst.grammar.antlr.*;
import com.verivital.hyst.grammar.formula.*;
import com.verivital.hyst.importer.*;
import com.verivital.hyst.ir.*;
import com.verivital.hyst.junit.*;
import com.verivital.hyst.util.*;
import com.verivital.hyst.main.*;
import com.verivital.hyst.passes.*;
import com.verivital.hyst.printers.*;
import com.verivital.hyst.simulation.*;
import de.uni_freiburg.informatik.swt.sxhybridautomaton.*;
import de.uni_freiburg.informatik.swt.spaceexxmlprinter.*;
import de.uni_freiburg.informatik.swt.spaxeexxmlreader.*;

run generateNNSymbolicODEs.m
% generate base component
%ha = com.verivital.hyst.ir.base.BaseComponent;
numLoc = 1;
numTran = 0;
var = {'x1';'x2';'x3';'x4';'x5'};
numVar = length(var);


flowstr=ODEs{1};
for i=2:(length(ODEs))
    flowstr=strcat(flowstr," ",'&'," ",ODEs{i});
end
% add invariants and flows for the single mode
flow={
    flowstr;
};

%add variables to hybrid automaton
for i_var = 1:numVar
    %ha.variableNames.add(java.lang.String(var(i_var)));
    ha.variables.add(java.lang.String(var(i_var)));
end

locName ={'mode1',};
for i_loc = 1:numLoc
    %ati = com.verivital.hyst.importer.SpaceExImporter;
    loc = ha.createMode(locName(i_loc),invariant(i_loc),flow(i_loc));
    locations(i_loc) = loc;
end


initial
